{
    "Async field getter with more logic": {
        "body": [
            "Future<$1> get $2 async {",
            "\t$3",
            "}"
        ],
        "prefix": "agett"
    },
    "Class outline": {
        "body": [
            "class $1 {",
            "\t$0",
            "}"
        ],
        "prefix": "class"
    },
    "Instance or top level method": {
        "body": [
            "${1:void} $2($3) {",
            "\t$0",
            "}"
        ],
        "prefix": "m"
    },
    "Async field getter": {
        "body": [
            "Future<$1> get $2 async => ${3:_$2};"
        ],
        "prefix": "aget"
    },
    "Stream field with a controller": {
        "body": [
            "Stream<${2:void}> get ${1} => ${3:$4.stream;",
            "final ${4:_$1} = StreamController<$2>();}"
        ],
        "prefix": "gets"
    },
    "Async anonymous method": {
        "body": [
            "($1) async {",
            "\t$0",
            "}"
        ],
        "prefix": "am"
    },
    "Field with lazy initialization": {
        "body": [
            "$1 _$2;",
            "${1} get ${2} => _$2 ?? ${3:_init${2/.*/\\u$0/}()};"
        ],
        "prefix": "getl"
    },
    "Anonymous method": {
        "body": [
            "($1) {",
            "\t$0",
            "}"
        ],
        "prefix": "m"
    },
    "For-in loop": {
        "body": [
            "for(var $1 in ${2:$1s}) {",
            "\t$0",
            "}"
        ],
        "prefix": "for"
    },
    "Field setter": {
        "body": [
            "set $1($2 $1) {",
            "\t${3:_$1 = $1;}",
            "}"
        ],
        "prefix": "set"
    },
    "If block": {
        "body": [
            "if ($1) {",
            "\t${2:${VISUAL}}",
            "}"
        ],
        "prefix": "if"
    },
    "Simple field getter": {
        "body": [
            "$1 get $2 => ${3:_$2};"
        ],
        "prefix": "get"
    },
    "indexed for loop": {
        "body": [
            "for(int i = 0, ${3:l} = $2.length; i<$3; i++) {",
            "\tvar $1 = ${2:$1s}[i];",
            "\t$0",
            "}"
        ],
        "prefix": "fori"
    },
    "Anonymous identity method": {
        "body": [
            "(${1:_}) => $1"
        ],
        "prefix": "ident"
    },
    "Async instance or top level method": {
        "body": [
            "Future<${1:void}> $2($3) async {",
            "\t$0",
            "}"
        ],
        "prefix": "am"
    },
    "Field getter with more logic": {
        "body": [
            "$1 get $2 {",
            "\t$3",
            "}"
        ],
        "prefix": "gett"
    },
    "Anonymous single statement return": {
        "body": [
            "($1) => $0"
        ],
        "prefix": "r"
    },
    "Async anonymous single statement method": {
        "body": [
            "($1) async => $0"
        ],
        "prefix": "ar"
    },
    "Import": {
        "body": [
            "import 'package:$1/${2:$1}.dart';"
        ],
        "prefix": "im"
    },
    "Single statement return": {
        "body": [
            "$1 $2($3) => $0;"
        ],
        "prefix": "r"
    },
    "Dart import": {
        "body": [
            "import 'dart:${1:async}';"
        ],
        "prefix": "di"
    },
    "Try/catch block": {
        "body": [
            "try {",
            "\t${1:${VISUAL}}",
            "} catch(${2:e}${3:, st}) {",
            "\t$4",
            "}"
        ],
        "prefix": "try"
    },
    "Async single statement return": {
        "body": [
            "Future<$1> $2($3) async => $0;"
        ],
        "prefix": "ar"
    },
    "Dart main method": {
        "body": [
            "void main() {",
            "\t$0",
            "}"
        ],
        "prefix": "main"
    }
}
